@inject IUserRetrievalShim UserRetrievalShim
@model PostItemContainer
@{
	var user = UserRetrievalShim.GetUser();
	string deleteLink;
	if (Model.Post.IsDeleted)
	{ deleteLink = PopForums.Resources.Undelete; }
	else if (Model.Post.IsFirstInTopic)
	{ deleteLink = PopForums.Resources.DeleteTopic; }
	else
	{ deleteLink = PopForums.Resources.Delete; }
	var hideVanity = false;
	if (Model.Profile != null)
	{ hideVanity = Model.Profile.HideVanity; }

	var isLoggedIn = user != null;
	var isAuthor = user?.UserID == Model.Post.UserID;
	var isVoted = isLoggedIn && !isAuthor && Model.VotedPostIDs.Contains(Model.Post.PostID);
	var isIgnored = Model.IgnoreUserIDs.Contains(Model.Post.UserID);
}

@if (isIgnored)
{
	<a class="d-block my-2 alert alert-secondary" data-bs-toggle="collapse" href="#post@(Model.Post.PostID)" aria-expanded="false" aria-controls="post@(Model.Post.PostID)">ignored</a>
}

<div id="post@(Model.Post.PostID)" class="@(Model.Post.IsDeleted ? "bg-warning " : "")@(isIgnored ? "collapse " : "")postItem my-3" data-postID="@Model.Post.PostID">
	<div class="postUserData bg-primary rounded mb-3 px-3 py-1">
		<pf-postminiprofile username="@Model.Post.Name" userid="@Model.Post.UserID" miniprofileboxclass="miniProfileBox bg-light text-dark rounded" usernameclass="text-light"></pf-postminiprofile>
		<small class="postTime text-end text-light text-secondary">
			@if (Model.User != null && Model.User.IsInRole(PermanentRoles.Moderator))
			{
				@:IP: @Model.Post.IP -
			}
			<pf-formattedtime utctime="@Model.Post.PostTime.ToString("o")"></pf-formattedtime>
		</small>
	</div>
	@if (!hideVanity && Model.Avatars.ContainsKey(Model.Post.UserID))
	{
		<img src="@Url.Action("Avatar", "Image", new {id = (Model.Avatars)[Model.Post.UserID]})" alt="@String.Format(PopForums.Resources.NameAvatar, Model.Post.Name)" class="avatar float-end ms-3 mb-3 d-none d-sm-block" />
	}
    
	<div id="text@(Model.Post.PostID)" class="postBody">
		@Html.Raw(Model.Post.FullText)
	</div>
	
	@if (Model.Post.IsEdited && Model.Post.LastEditTime.HasValue)
	{
		<small>@String.Format(PopForums.Resources.NameLastEdit, Model.Post.LastEditName), <pf-formattedtime utctime="@Model.Post.LastEditTime.Value.ToString("o")"></pf-formattedtime></small>
	}

	@if (Model.Post.ShowSig && !hideVanity && (Model.Signatures).ContainsKey(Model.Post.UserID))
	{
		<hr />
		<div class="text-secondary">@Html.Raw((Model.Signatures)[Model.Post.UserID])</div>
	}
	<div class="mt-3 d-flex postToolContainer">
		<div class="my-auto">
			<pf-votecount votes="@Model.Post.Votes" postid="@Model.Post.PostID" votescontainerclass="voters" badgeclass="voteCount badge bg-primary align-text-top me-3" isloggedin="@isLoggedIn.ToString()" isauthor="@isAuthor.ToString()" isvoted="@isVoted.ToString()" votebuttonclass="" containerclass="voteUpContainer"></pf-votecount>
		</div>
		<div class="toolButton"><a asp-controller="Forum" asp-action="PostLink" asp-route-id="@Model.Post.PostID" title="@PopForums.Resources.Link" rel="nofollow"><span class="icon icon-link"></span></a></div>
		@if (user != null && Model.Topic != null && Model.Topic.IsClosed == false)
		{
			<div class="toolButton"><pf-replybutton buttonclass="btn-link icon icon-reply-fill" buttontext="@PopForums.Resources.Reply" topicid="@Model.Topic.TopicID" postid="@Model.Post.PostID" overridedisplay="true" isposttool="true"></pf-replybutton></div>
			<div class="toolButton"><pf-quotebutton name="@Model.Post.Name" buttonclass="btn-link icon icon-quote" containerid="text@(Model.Post.PostID)" buttontext="@PopForums.Resources.Quote" tip="@PopForums.Resources.SelectText" postid="@Model.Post.PostID" callback="PopForums.currentTopicState.nextQuote"></pf-quotebutton></div>
		}
		@if (Model.User.IsPostEditable(Model.Post))
		{
			<div class="toolButton"><a asp-controller="Forum" asp-action="Edit" asp-route-id="@Model.Post.PostID" title="@PopForums.Resources.Edit"><span class="icon icon-pencil-square"></span></a></div>
		}
		@if (Model.User.IsPostEditable(Model.Post))
		{
			@if (Model.Post.IsDeleted)
			{
				<div class="toolButton ms-auto">
					<form asp-action="UndeletePost" asp-controller="Moderator" asp-antiforgery="false" asp-route-id="@Model.Post.PostID" class="deletePostForm d-inline-block"><button type="submit" title="@PopForums.Resources.Undelete" class="btn-link"><span class="icon icon-recycle"></span></button></form>
				</div>
			}
			else
			{
				<div class="toolButton ms-auto">
					<form asp-action="DeletePost" asp-controller="Forum" asp-antiforgery="false" asp-route-id="@Model.Post.PostID" class="deletePostForm d-inline-block"><button type="submit" title="@deleteLink" class="btn-link"><span class="icon icon-trash3-fill"></span></button></form>
				</div>
			}
		}
	</div>
	@if (Model.Post.IsEdited && Model.User != null && Model.User.IsInRole(PermanentRoles.Moderator))
	{
		<div>
			<pf-postmoderationlogbutton buttonclass="btn-link" buttontext="@PopForums.Resources.ModerationLog" postid="@Model.Post.PostID" parentselectortoappendto=".postItem"></pf-postmoderationlogbutton>
		</div>
	}
</div>